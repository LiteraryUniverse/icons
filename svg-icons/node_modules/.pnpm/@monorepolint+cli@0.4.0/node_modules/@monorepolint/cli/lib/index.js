"use strict";
/*!
 * Copyright 2019 Palantir Technologies, Inc.
 *
 * Licensed under the MIT license. See LICENSE file in the project root for details.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@monorepolint/core");
const utils_1 = require("@monorepolint/utils");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const yargs_1 = tslib_1.__importDefault(require("yargs"));
function run() {
    try {
        // tslint:disable-next-line:no-implicit-dependencies
        require("ts-node").register();
    }
    catch (err) {
        // no ts-node, no problem
    }
    yargs_1.default
        .command("check [--verbose] [--fix] [--paths <paths>...]", "Checks the mono repo for lint violations", {
        verbose: {
            type: "boolean",
        },
        fix: {
            type: "boolean",
        },
        paths: {
            type: "array",
            string: true,
        },
    }, handleCheck)
        .demandCommand(1, "At least one command required")
        .help()
        .showHelpOnFail(true)
        .parse();
}
exports.default = run;
function getVersion() {
    return JSON.parse(fs.readFileSync(path.join(__dirname, "../package.json"), "utf-8")).version;
}
function handleCheck(args) {
    // tslint:disable:no-console
    console.log("monorepolint (mrl) v" + getVersion());
    console.log();
    const configPath = path.resolve(process.cwd(), ".monorepolint.config.ts");
    const config = core_1.Config.check(require(configPath));
    const resolvedConfig = core_1.resolveConfig(config, args, utils_1.findWorkspaceDir(process.cwd()));
    if (!core_1.check(resolvedConfig, process.cwd(), args.paths)) {
        console.error();
        const execPath = process.env.npm_execpath;
        const npmAgent = typeof execPath === "string"
            ? execPath.includes("yarn")
                ? "yarn"
                : execPath.includes("npm")
                    ? "npm"
                    : undefined
            : undefined;
        const runCommand = npmAgent === "yarn" ? "yarn mrl" : npmAgent === "npm" ? "npm run mrl" : "mrl";
        console.error("monorepolint (mrl) failed 1 or more checks");
        console.error();
        console.error(`For more information, run ${chalk_1.default.blue(`${runCommand} check --verbose`)}`);
        console.error(`To automatically fix errors, run ${chalk_1.default.blue(`${runCommand} check --fix`)}`);
        console.error();
        process.exit(100);
    }
}
//# sourceMappingURL=index.js.map