"use strict";
/*!
 * Copyright 2019 Palantir Technologies, Inc.
 *
 * Licensed under the MIT license. See LICENSE file in the project root for details.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("@monorepolint/utils");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const path = tslib_1.__importStar(require("path"));
// Right now, this stuff is done serially so we are writing less code to support that. Later we may want to redo this.
class PackageContext {
    constructor(packageDir, resolvedConfig, parent) {
        this.packageDir = packageDir;
        this.resolvedConfig = resolvedConfig;
        this.parent = parent;
        this.failed = false;
        this.printedName = false;
        this.depth = this.parent ? this.parent.depth + 1 : 0;
    }
    getName() {
        return this.getPackageJson().name || this.packageDir;
    }
    getPackageJsonPath() {
        return path.join(this.packageDir, "package.json");
    }
    getPackageJson() {
        return utils_1.readJson(this.getPackageJsonPath());
    }
    addWarning({ message, longMessage }) {
        this.printName();
        this.printWarning(`${chalk_1.default.yellow("Warning!")}: ${message}`);
        if (this.resolvedConfig.verbose && longMessage) {
            for (let i = 0; i <= this.depth + 1; i++) {
                // tslint:disable-next-line:no-console
                console.group();
            }
            this.printWarning(`${longMessage}`, 0);
            for (let i = 0; i <= this.depth + 1; i++) {
                // tslint:disable-next-line:no-console
                console.groupEnd();
            }
        }
    }
    addError({ file, message, longMessage, fixer }) {
        this.printName();
        const shortFile = path.relative(this.packageDir, file);
        if (this.resolvedConfig.fix && fixer) {
            fixer();
            this.print(`${chalk_1.default.green("Fixed!")} ${chalk_1.default.magenta(shortFile)}: ${message}`);
        }
        else {
            this.setFailed();
            this.printError(`${chalk_1.default.red("Error!")} ${chalk_1.default.magenta(shortFile)}: ${message}`);
            if (this.resolvedConfig.verbose && longMessage) {
                for (let i = 0; i <= this.depth + 1; i++) {
                    // tslint:disable-next-line:no-console
                    console.group();
                }
                this.printError(`${longMessage}`, 0);
                for (let i = 0; i <= this.depth + 1; i++) {
                    // tslint:disable-next-line:no-console
                    console.groupEnd();
                }
            }
        }
    }
    isFailure() {
        return this.failed;
    }
    finish() {
        // do nothing for now
    }
    setFailed() {
        this.failed = true;
        if (!this.parent) {
            return;
        }
        return this.parent.setFailed();
    }
    getWorkspaceContext() {
        let context = this;
        while (context.parent !== undefined) {
            context = context.parent;
        }
        return context;
    }
    print(str, depth = this.depth + 1) {
        // tslint:disable-next-line:no-console
        console.log(this.getMessage(str, depth));
    }
    printWarning(str, depth = this.depth + 1) {
        // tslint:disable-next-line:no-console
        console.warn(this.getMessage(str, depth));
    }
    printError(str, depth = this.depth + 1) {
        // tslint:disable-next-line:no-console
        console.error(this.getMessage(str, depth));
    }
    getMessage(str, depth) {
        return " ".repeat(depth * 2) + str;
    }
    printName() {
        if (this.printedName) {
            return;
        }
        this.print(`${chalk_1.default.blue(this.getName())} (${this.packageDir})`, this.depth);
        this.printedName = true;
    }
}
exports.PackageContext = PackageContext;
//# sourceMappingURL=PackageContext.js.map