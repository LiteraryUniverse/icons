"use strict";
/*!
 * Copyright 2019 Palantir Technologies, Inc.
 *
 * Licensed under the MIT license. See LICENSE file in the project root for details.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const check_1 = require("../check");
const WorkspaceContext_1 = require("../WorkspaceContext");
describe("shouldSkipPackage", () => {
    const resolvedConfig = {
        rules: [],
        verbose: false,
        fix: false,
    };
    const workspaceContext = new WorkspaceContext_1.WorkspaceContext(".", resolvedConfig);
    jest.spyOn(workspaceContext, "getName").mockImplementation(() => "root");
    const fooContext = createChild(workspaceContext, "packages/foo", "@foo/bar");
    it("should skip if specified in excludePackages no matter what", () => {
        const actual = check_1.shouldSkipPackage(fooContext, {
            check: () => true,
            excludePackages: [fooContext.getName(), "other"],
            includePackages: [fooContext.getName()],
            optionsRuntype: {},
        });
        expect(actual).toEqual(true);
    });
    it("should skip if includes is specified but package is not", () => {
        const actual = check_1.shouldSkipPackage(fooContext, {
            check: () => true,
            includePackages: [],
            optionsRuntype: {},
        });
        expect(actual).toEqual(true);
    });
    it("should not skip if excludes and includes are omitted", () => {
        const actual = check_1.shouldSkipPackage(fooContext, {
            check: () => true,
            optionsRuntype: {},
        });
        expect(actual).toEqual(false);
    });
    it("should skip root by default", () => {
        const actual = check_1.shouldSkipPackage(workspaceContext, {
            check: () => true,
            optionsRuntype: {},
        });
        expect(actual).toEqual(true);
    });
    it("should skip properly with globs", () => {
        const actual = check_1.shouldSkipPackage(workspaceContext, {
            check: () => true,
            excludePackages: ["@foo/*", "other"],
            optionsRuntype: {},
        });
        expect(actual).toEqual(true);
    });
    it("should properly not skip with globs", () => {
        const actual = check_1.shouldSkipPackage(workspaceContext, {
            check: () => true,
            includePackages: ["@foo/*", "other"],
            optionsRuntype: {},
        });
        expect(actual).toEqual(true);
    });
});
function createChild(c, path, name) {
    const ret = c.createChildContext(path);
    jest.spyOn(ret, "getName").mockImplementation(() => name);
    return ret;
}
//# sourceMappingURL=shouldSkipPackage.spec.js.map